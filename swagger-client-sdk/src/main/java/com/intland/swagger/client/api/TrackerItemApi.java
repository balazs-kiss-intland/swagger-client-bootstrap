/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.ProgressRequestBody;
import com.intland.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.intland.swagger.client.model.TrackerItem;
import com.intland.swagger.client.model.TrackerItemChildReference;
import com.intland.swagger.client.model.TrackerItemHistory;
import com.intland.swagger.client.model.TrackerItemRevision;
import com.intland.swagger.client.model.TrackerItemRevisionSearchResult;
import com.intland.swagger.client.model.TrackerItemSearchRequest;
import com.intland.swagger.client.model.TrackerItemSearchResult;
import com.intland.swagger.client.model.TrackerItemsRequest;
import com.intland.swagger.client.model.UpdateTrackerItemChildrenRequest;
import com.intland.swagger.client.model.UpdateTrackerItemField;
import com.intland.swagger.client.model.UpdateTrackerItemTableField;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackerItemApi {
    private ApiClient localVarApiClient;

    public TrackerItemApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerItemApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addChildToTrackerItem
     * @param itemId  (required)
     * @param trackerItemRevision  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addChildToTrackerItemCall(Integer itemId, TrackerItemRevision trackerItemRevision, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemRevision;

        // create path and map variables
        String localVarPath = "/v2/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addChildToTrackerItemValidateBeforeCall(Integer itemId, TrackerItemRevision trackerItemRevision, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling addChildToTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = addChildToTrackerItemCall(itemId, trackerItemRevision, _callback);
        return localVarCall;

    }

    /**
     * Add a child item to a tracker item
     * 
     * @param itemId  (required)
     * @param trackerItemRevision  (optional)
     * @return TrackerItemChildReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItemChildReference addChildToTrackerItem(Integer itemId, TrackerItemRevision trackerItemRevision) throws ApiException {
        ApiResponse<TrackerItemChildReference> localVarResp = addChildToTrackerItemWithHttpInfo(itemId, trackerItemRevision);
        return localVarResp.getData();
    }

    /**
     * Add a child item to a tracker item
     * 
     * @param itemId  (required)
     * @param trackerItemRevision  (optional)
     * @return ApiResponse&lt;TrackerItemChildReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItemChildReference> addChildToTrackerItemWithHttpInfo(Integer itemId, TrackerItemRevision trackerItemRevision) throws ApiException {
        okhttp3.Call localVarCall = addChildToTrackerItemValidateBeforeCall(itemId, trackerItemRevision, null);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a child item to a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param trackerItemRevision  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addChildToTrackerItemAsync(Integer itemId, TrackerItemRevision trackerItemRevision, final ApiCallback<TrackerItemChildReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = addChildToTrackerItemValidateBeforeCall(itemId, trackerItemRevision, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrackerItem
     * @param trackerId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createTrackerItemCall(Integer trackerId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItem;

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/item"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (referenceItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceItemId", referenceItemId));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackerItemValidateBeforeCall(Integer trackerId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling createTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = createTrackerItemCall(trackerId, referenceItemId, position, trackerItem, _callback);
        return localVarCall;

    }

    /**
     * Create a tracker item
     * ext:createTrackerItem.wiki
     * @param trackerId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem createTrackerItem(Integer trackerId, Integer referenceItemId, String position, TrackerItem trackerItem) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = createTrackerItemWithHttpInfo(trackerId, referenceItemId, position, trackerItem);
        return localVarResp.getData();
    }

    /**
     * Create a tracker item
     * ext:createTrackerItem.wiki
     * @param trackerId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> createTrackerItemWithHttpInfo(Integer trackerId, Integer referenceItemId, String position, TrackerItem trackerItem) throws ApiException {
        okhttp3.Call localVarCall = createTrackerItemValidateBeforeCall(trackerId, referenceItemId, position, trackerItem, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tracker item (asynchronously)
     * ext:createTrackerItem.wiki
     * @param trackerId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createTrackerItemAsync(Integer trackerId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackerItemValidateBeforeCall(trackerId, referenceItemId, position, trackerItem, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrackerItemWithParentId
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createTrackerItemWithParentIdCall(Integer trackerId, Integer parentItemId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItem;

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/item/{parentItemId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "parentItemId" + "\\}", localVarApiClient.escapeString(parentItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (referenceItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceItemId", referenceItemId));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackerItemWithParentIdValidateBeforeCall(Integer trackerId, Integer parentItemId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling createTrackerItemWithParentId(Async)");
        }
        
        // verify the required parameter 'parentItemId' is set
        if (parentItemId == null) {
            throw new ApiException("Missing the required parameter 'parentItemId' when calling createTrackerItemWithParentId(Async)");
        }
        

        okhttp3.Call localVarCall = createTrackerItemWithParentIdCall(trackerId, parentItemId, referenceItemId, position, trackerItem, _callback);
        return localVarCall;

    }

    /**
     * Create a tracker item with parent
     * ext:createTrackerItemWithParent.wiki
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem createTrackerItemWithParentId(Integer trackerId, Integer parentItemId, Integer referenceItemId, String position, TrackerItem trackerItem) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = createTrackerItemWithParentIdWithHttpInfo(trackerId, parentItemId, referenceItemId, position, trackerItem);
        return localVarResp.getData();
    }

    /**
     * Create a tracker item with parent
     * ext:createTrackerItemWithParent.wiki
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> createTrackerItemWithParentIdWithHttpInfo(Integer trackerId, Integer parentItemId, Integer referenceItemId, String position, TrackerItem trackerItem) throws ApiException {
        okhttp3.Call localVarCall = createTrackerItemWithParentIdValidateBeforeCall(trackerId, parentItemId, referenceItemId, position, trackerItem, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tracker item with parent (asynchronously)
     * ext:createTrackerItemWithParent.wiki
     * @param trackerId  (required)
     * @param parentItemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createTrackerItemWithParentIdAsync(Integer trackerId, Integer parentItemId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackerItemWithParentIdValidateBeforeCall(trackerId, parentItemId, referenceItemId, position, trackerItem, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackerItem
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteTrackerItemCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerItemValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerItemCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Delete tracker item
     * 
     * @param itemId  (required)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem deleteTrackerItem(Integer itemId) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = deleteTrackerItemWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Delete tracker item
     * 
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> deleteTrackerItemWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerItemValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteTrackerItemAsync(Integer itemId, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerItemValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerItemChildren
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call findTrackerItemChildrenCall(Integer itemId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerItemChildrenValidateBeforeCall(Integer itemId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling findTrackerItemChildren(Async)");
        }
        

        okhttp3.Call localVarCall = findTrackerItemChildrenCall(itemId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get child items of a tracker item
     * 
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemRevisionSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItemRevisionSearchResult findTrackerItemChildren(Integer itemId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<TrackerItemRevisionSearchResult> localVarResp = findTrackerItemChildrenWithHttpInfo(itemId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get child items of a tracker item
     * 
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemRevisionSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItemRevisionSearchResult> findTrackerItemChildrenWithHttpInfo(Integer itemId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findTrackerItemChildrenValidateBeforeCall(itemId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemRevisionSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get child items of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call findTrackerItemChildrenAsync(Integer itemId, Integer page, Integer pageSize, final ApiCallback<TrackerItemRevisionSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerItemChildrenValidateBeforeCall(itemId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemRevisionSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerItems
     * @param queryString  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsCall(String queryString, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (queryString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryString", queryString));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerItemsValidateBeforeCall(String queryString, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'queryString' is set
        if (queryString == null) {
            throw new ApiException("Missing the required parameter 'queryString' when calling findTrackerItems(Async)");
        }
        

        okhttp3.Call localVarCall = findTrackerItemsCall(queryString, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items by cbQL query string
     * ext:queryTrackerItem.wiki
     * @param queryString  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return TrackerItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public TrackerItemSearchResult findTrackerItems(String queryString, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<TrackerItemSearchResult> localVarResp = findTrackerItemsWithHttpInfo(queryString, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get tracker items by cbQL query string
     * ext:queryTrackerItem.wiki
     * @param queryString  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;TrackerItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public ApiResponse<TrackerItemSearchResult> findTrackerItemsWithHttpInfo(String queryString, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = findTrackerItemsValidateBeforeCall(queryString, page, pageSize, null);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items by cbQL query string (asynchronously)
     * ext:queryTrackerItem.wiki
     * @param queryString  (required)
     * @param page Index of the result page starting from 1. (optional, default to 1)
     * @param pageSize Number of items in a result page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsAsync(String queryString, Integer page, Integer pageSize, final ApiCallback<TrackerItemSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerItemsValidateBeforeCall(queryString, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTrackerItemsByCbQL
     * @param trackerItemSearchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsByCbQLCall(TrackerItemSearchRequest trackerItemSearchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemSearchRequest;

        // create path and map variables
        String localVarPath = "/v2/item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTrackerItemsByCbQLValidateBeforeCall(TrackerItemSearchRequest trackerItemSearchRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findTrackerItemsByCbQLCall(trackerItemSearchRequest, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param trackerItemSearchRequest  (optional)
     * @return TrackerItemSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public TrackerItemSearchResult findTrackerItemsByCbQL(TrackerItemSearchRequest trackerItemSearchRequest) throws ApiException {
        ApiResponse<TrackerItemSearchResult> localVarResp = findTrackerItemsByCbQLWithHttpInfo(trackerItemSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Get tracker items by cbQL query string
     * API can be called with a complex cbQL string to find tracker items
     * @param trackerItemSearchRequest  (optional)
     * @return ApiResponse&lt;TrackerItemSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public ApiResponse<TrackerItemSearchResult> findTrackerItemsByCbQLWithHttpInfo(TrackerItemSearchRequest trackerItemSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = findTrackerItemsByCbQLValidateBeforeCall(trackerItemSearchRequest, null);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items by cbQL query string (asynchronously)
     * API can be called with a complex cbQL string to find tracker items
     * @param trackerItemSearchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * Documentation of cbQL
     * @see <a href="https://codebeamer.com/cb/wiki/871101">Get tracker items by cbQL query string Documentation</a>
     */
    public okhttp3.Call findTrackerItemsByCbQLAsync(TrackerItemSearchRequest trackerItemSearchRequest, final ApiCallback<TrackerItemSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTrackerItemsByCbQLValidateBeforeCall(trackerItemSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItem
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerItemCall(Integer itemId, Integer version, Integer baselineId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemValidateBeforeCall(Integer itemId, Integer version, Integer baselineId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemCall(itemId, version, baselineId, _callback);
        return localVarCall;

    }

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem getTrackerItem(Integer itemId, Integer version, Integer baselineId) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = getTrackerItemWithHttpInfo(itemId, version, baselineId);
        return localVarResp.getData();
    }

    /**
     * Get basic tracker item
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> getTrackerItemWithHttpInfo(Integer itemId, Integer version, Integer baselineId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemValidateBeforeCall(itemId, version, baselineId, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basic tracker item (asynchronously)
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param version  (optional)
     * @param baselineId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerItemAsync(Integer itemId, Integer version, Integer baselineId, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemValidateBeforeCall(itemId, version, baselineId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItemHistory
     * @param itemId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerItemHistoryCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/history"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemHistoryValidateBeforeCall(Integer itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getTrackerItemHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerItemHistoryCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker item history
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @return TrackerItemHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItemHistory getTrackerItemHistory(Integer itemId) throws ApiException {
        ApiResponse<TrackerItemHistory> localVarResp = getTrackerItemHistoryWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Get tracker item history
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @return ApiResponse&lt;TrackerItemHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItemHistory> getTrackerItemHistoryWithHttpInfo(Integer itemId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemHistoryValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<TrackerItemHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker item history (asynchronously)
     * API can be used for fetching basic information of a tracker item
     * @param itemId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerItemHistoryAsync(Integer itemId, final ApiCallback<TrackerItemHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemHistoryValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItems
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerItemsCall(Integer baselineId, TrackerItemsRequest trackerItemsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemsRequest;

        // create path and map variables
        String localVarPath = "/v2/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemsValidateBeforeCall(Integer baselineId, TrackerItemsRequest trackerItemsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTrackerItemsCall(baselineId, trackerItemsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @return List&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrackerItem> getTrackerItems(Integer baselineId, TrackerItemsRequest trackerItemsRequest) throws ApiException {
        ApiResponse<List<TrackerItem>> localVarResp = getTrackerItemsWithHttpInfo(baselineId, trackerItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @return ApiResponse&lt;List&lt;TrackerItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrackerItem>> getTrackerItemsWithHttpInfo(Integer baselineId, TrackerItemsRequest trackerItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemsValidateBeforeCall(baselineId, trackerItemsRequest, null);
        Type localVarReturnType = new TypeToken<List<TrackerItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items (asynchronously)
     * API can be used for fetching basic information of tracker items
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerItemsAsync(Integer baselineId, TrackerItemsRequest trackerItemsRequest, final ApiCallback<List<TrackerItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemsValidateBeforeCall(baselineId, trackerItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchChildrenOfTrackerItem
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call patchChildrenOfTrackerItemCall(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemChildReference;

        // create path and map variables
        String localVarPath = "/v2/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchChildrenOfTrackerItemValidateBeforeCall(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling patchChildrenOfTrackerItem(Async)");
        }
        
        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling patchChildrenOfTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = patchChildrenOfTrackerItemCall(itemId, mode, trackerItemChildReference, _callback);
        return localVarCall;

    }

    /**
     * Patch the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (optional)
     * @return TrackerItemChildReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItemChildReference patchChildrenOfTrackerItem(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference) throws ApiException {
        ApiResponse<TrackerItemChildReference> localVarResp = patchChildrenOfTrackerItemWithHttpInfo(itemId, mode, trackerItemChildReference);
        return localVarResp.getData();
    }

    /**
     * Patch the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (optional)
     * @return ApiResponse&lt;TrackerItemChildReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItemChildReference> patchChildrenOfTrackerItemWithHttpInfo(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference) throws ApiException {
        okhttp3.Call localVarCall = patchChildrenOfTrackerItemValidateBeforeCall(itemId, mode, trackerItemChildReference, null);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch the child item list of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param mode  (required)
     * @param trackerItemChildReference  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call patchChildrenOfTrackerItemAsync(Integer itemId, String mode, TrackerItemChildReference trackerItemChildReference, final ApiCallback<TrackerItemChildReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchChildrenOfTrackerItemValidateBeforeCall(itemId, mode, trackerItemChildReference, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemChildReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceChildrenOfTrackerItem
     * @param itemId  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param updateTrackerItemChildrenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call replaceChildrenOfTrackerItemCall(Integer itemId, Integer resultPageSize, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemChildrenRequest;

        // create path and map variables
        String localVarPath = "/v2/items/{itemId}/children"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resultPageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultPageSize", resultPageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceChildrenOfTrackerItemValidateBeforeCall(Integer itemId, Integer resultPageSize, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling replaceChildrenOfTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = replaceChildrenOfTrackerItemCall(itemId, resultPageSize, updateTrackerItemChildrenRequest, _callback);
        return localVarCall;

    }

    /**
     * Replace the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param updateTrackerItemChildrenRequest  (optional)
     * @return TrackerItemRevisionSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItemRevisionSearchResult replaceChildrenOfTrackerItem(Integer itemId, Integer resultPageSize, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest) throws ApiException {
        ApiResponse<TrackerItemRevisionSearchResult> localVarResp = replaceChildrenOfTrackerItemWithHttpInfo(itemId, resultPageSize, updateTrackerItemChildrenRequest);
        return localVarResp.getData();
    }

    /**
     * Replace the child item list of a tracker item
     * 
     * @param itemId  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param updateTrackerItemChildrenRequest  (optional)
     * @return ApiResponse&lt;TrackerItemRevisionSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItemRevisionSearchResult> replaceChildrenOfTrackerItemWithHttpInfo(Integer itemId, Integer resultPageSize, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest) throws ApiException {
        okhttp3.Call localVarCall = replaceChildrenOfTrackerItemValidateBeforeCall(itemId, resultPageSize, updateTrackerItemChildrenRequest, null);
        Type localVarReturnType = new TypeToken<TrackerItemRevisionSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace the child item list of a tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param resultPageSize Number of items in the result page. Max value: 500 (optional, default to 25)
     * @param updateTrackerItemChildrenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call replaceChildrenOfTrackerItemAsync(Integer itemId, Integer resultPageSize, UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest, final ApiCallback<TrackerItemRevisionSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceChildrenOfTrackerItemValidateBeforeCall(itemId, resultPageSize, updateTrackerItemChildrenRequest, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemRevisionSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFieldTrackerItem
     * @param itemId  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @param updateTrackerItemField  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateCustomFieldTrackerItemCall(Integer itemId, Boolean quietMode, UpdateTrackerItemField updateTrackerItemField, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemField;

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/field"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (quietMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quietMode", quietMode));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldTrackerItemValidateBeforeCall(Integer itemId, Boolean quietMode, UpdateTrackerItemField updateTrackerItemField, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateCustomFieldTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomFieldTrackerItemCall(itemId, quietMode, updateTrackerItemField, _callback);
        return localVarCall;

    }

    /**
     * Update field of tracker item
     * ext:updateTrackerItemField.wiki
     * @param itemId  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @param updateTrackerItemField  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem updateCustomFieldTrackerItem(Integer itemId, Boolean quietMode, UpdateTrackerItemField updateTrackerItemField) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = updateCustomFieldTrackerItemWithHttpInfo(itemId, quietMode, updateTrackerItemField);
        return localVarResp.getData();
    }

    /**
     * Update field of tracker item
     * ext:updateTrackerItemField.wiki
     * @param itemId  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @param updateTrackerItemField  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> updateCustomFieldTrackerItemWithHttpInfo(Integer itemId, Boolean quietMode, UpdateTrackerItemField updateTrackerItemField) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldTrackerItemValidateBeforeCall(itemId, quietMode, updateTrackerItemField, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update field of tracker item (asynchronously)
     * ext:updateTrackerItemField.wiki
     * @param itemId  (required)
     * @param quietMode If it&#39;s turned on HTTP 200 with empty response indicates that the update was successful. (optional, default to false)
     * @param updateTrackerItemField  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateCustomFieldTrackerItemAsync(Integer itemId, Boolean quietMode, UpdateTrackerItemField updateTrackerItemField, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldTrackerItemValidateBeforeCall(itemId, quietMode, updateTrackerItemField, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTableFieldTrackerItem
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateTableFieldTrackerItemCall(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTrackerItemTableField;

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/field/table/{tableFieldId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()))
            .replaceAll("\\{" + "tableFieldId" + "\\}", localVarApiClient.escapeString(tableFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTableFieldTrackerItemValidateBeforeCall(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateTableFieldTrackerItem(Async)");
        }
        
        // verify the required parameter 'tableFieldId' is set
        if (tableFieldId == null) {
            throw new ApiException("Missing the required parameter 'tableFieldId' when calling updateTableFieldTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateTableFieldTrackerItemCall(itemId, tableFieldId, updateTrackerItemTableField, _callback);
        return localVarCall;

    }

    /**
     * Update table field of tracker item
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem updateTableFieldTrackerItem(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = updateTableFieldTrackerItemWithHttpInfo(itemId, tableFieldId, updateTrackerItemTableField);
        return localVarResp.getData();
    }

    /**
     * Update table field of tracker item
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> updateTableFieldTrackerItemWithHttpInfo(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField) throws ApiException {
        okhttp3.Call localVarCall = updateTableFieldTrackerItemValidateBeforeCall(itemId, tableFieldId, updateTrackerItemTableField, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update table field of tracker item (asynchronously)
     * 
     * @param itemId  (required)
     * @param tableFieldId  (required)
     * @param updateTrackerItemTableField  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateTableFieldTrackerItemAsync(Integer itemId, Integer tableFieldId, UpdateTrackerItemTableField updateTrackerItemTableField, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTableFieldTrackerItemValidateBeforeCall(itemId, tableFieldId, updateTrackerItemTableField, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrackerItem
     * @param itemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateTrackerItemCall(Integer itemId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItem;

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (referenceItemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceItemId", referenceItemId));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackerItemValidateBeforeCall(Integer itemId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateTrackerItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateTrackerItemCall(itemId, referenceItemId, position, trackerItem, _callback);
        return localVarCall;

    }

    /**
     * Update tracker item
     * ext:updateTrackerItem.wiki
     * @param itemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @return TrackerItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItem updateTrackerItem(Integer itemId, Integer referenceItemId, String position, TrackerItem trackerItem) throws ApiException {
        ApiResponse<TrackerItem> localVarResp = updateTrackerItemWithHttpInfo(itemId, referenceItemId, position, trackerItem);
        return localVarResp.getData();
    }

    /**
     * Update tracker item
     * ext:updateTrackerItem.wiki
     * @param itemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @return ApiResponse&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItem> updateTrackerItemWithHttpInfo(Integer itemId, Integer referenceItemId, String position, TrackerItem trackerItem) throws ApiException {
        okhttp3.Call localVarCall = updateTrackerItemValidateBeforeCall(itemId, referenceItemId, position, trackerItem, null);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update tracker item (asynchronously)
     * ext:updateTrackerItem.wiki
     * @param itemId  (required)
     * @param referenceItemId  (optional)
     * @param position  (optional)
     * @param trackerItem  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateTrackerItemAsync(Integer itemId, Integer referenceItemId, String position, TrackerItem trackerItem, final ApiCallback<TrackerItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrackerItemValidateBeforeCall(itemId, referenceItemId, position, trackerItem, _callback);
        Type localVarReturnType = new TypeToken<TrackerItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
