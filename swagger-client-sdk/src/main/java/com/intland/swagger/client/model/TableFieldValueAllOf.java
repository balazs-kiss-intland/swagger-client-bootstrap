/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.intland.swagger.client.model.AbstractFieldValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TableFieldValueAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-10T15:21:24.239+01:00[Europe/Budapest]")
public class TableFieldValueAllOf {
  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private Integer fieldId;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<List<AbstractFieldValue>> values = new ArrayList<List<AbstractFieldValue>>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public TableFieldValueAllOf fieldId(Integer fieldId) {
    this.fieldId = fieldId;
    return this;
  }

   /**
   * Id of the field
   * @return fieldId
  **/
  @ApiModelProperty(value = "Id of the field")
  public Integer getFieldId() {
    return fieldId;
  }

  public void setFieldId(Integer fieldId) {
    this.fieldId = fieldId;
  }

  public TableFieldValueAllOf uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Reference to the field
   * @return uri
  **/
  @ApiModelProperty(value = "Reference to the field")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public TableFieldValueAllOf name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the field
   * @return name
  **/
  @ApiModelProperty(value = "Name of the field")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TableFieldValueAllOf values(List<List<AbstractFieldValue>> values) {
    this.values = values;
    return this;
  }

  public TableFieldValueAllOf addValuesItem(List<AbstractFieldValue> valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<List<AbstractFieldValue>>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Table values
   * @return values
  **/
  @ApiModelProperty(value = "Table values")
  public List<List<AbstractFieldValue>> getValues() {
    return values;
  }

  public void setValues(List<List<AbstractFieldValue>> values) {
    this.values = values;
  }

  public TableFieldValueAllOf type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the field
   * @return type
  **/
  @ApiModelProperty(value = "Type of the field")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableFieldValueAllOf tableFieldValueAllOf = (TableFieldValueAllOf) o;
    return Objects.equals(this.fieldId, tableFieldValueAllOf.fieldId) &&
        Objects.equals(this.uri, tableFieldValueAllOf.uri) &&
        Objects.equals(this.name, tableFieldValueAllOf.name) &&
        Objects.equals(this.values, tableFieldValueAllOf.values) &&
        Objects.equals(this.type, tableFieldValueAllOf.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldId, uri, name, values, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableFieldValueAllOf {\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

