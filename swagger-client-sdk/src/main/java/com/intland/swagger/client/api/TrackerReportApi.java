/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.ProgressRequestBody;
import com.intland.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.intland.swagger.client.model.ReportResult;
import com.intland.swagger.client.model.TrackerReportSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackerReportApi {
    private ApiClient localVarApiClient;

    public TrackerReportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerReportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTrackerReport
     * @param trackerId  (required)
     * @param trackerReportSettings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createTrackerReportCall(Integer trackerId, TrackerReportSettings trackerReportSettings, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerReportSettings;

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/report"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrackerReportValidateBeforeCall(Integer trackerId, TrackerReportSettings trackerReportSettings, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling createTrackerReport(Async)");
        }
        

        okhttp3.Call localVarCall = createTrackerReportCall(trackerId, trackerReportSettings, _callback);
        return localVarCall;

    }

    /**
     * Creates a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param trackerReportSettings  (optional)
     * @return TrackerReportSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerReportSettings createTrackerReport(Integer trackerId, TrackerReportSettings trackerReportSettings) throws ApiException {
        ApiResponse<TrackerReportSettings> localVarResp = createTrackerReportWithHttpInfo(trackerId, trackerReportSettings);
        return localVarResp.getData();
    }

    /**
     * Creates a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param trackerReportSettings  (optional)
     * @return ApiResponse&lt;TrackerReportSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerReportSettings> createTrackerReportWithHttpInfo(Integer trackerId, TrackerReportSettings trackerReportSettings) throws ApiException {
        okhttp3.Call localVarCall = createTrackerReportValidateBeforeCall(trackerId, trackerReportSettings, null);
        Type localVarReturnType = new TypeToken<TrackerReportSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a report of a specific tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param trackerReportSettings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createTrackerReportAsync(Integer trackerId, TrackerReportSettings trackerReportSettings, final ApiCallback<TrackerReportSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrackerReportValidateBeforeCall(trackerId, trackerReportSettings, _callback);
        Type localVarReturnType = new TypeToken<TrackerReportSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrackerReport
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteTrackerReportCall(Integer trackerId, Integer reportId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/report/{reportId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "reportId" + "\\}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerReportValidateBeforeCall(Integer trackerId, Integer reportId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling deleteTrackerReport(Async)");
        }
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling deleteTrackerReport(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerReportCall(trackerId, reportId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTrackerReport(Integer trackerId, Integer reportId) throws ApiException {
        deleteTrackerReportWithHttpInfo(trackerId, reportId);
    }

    /**
     * Deletes a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTrackerReportWithHttpInfo(Integer trackerId, Integer reportId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerReportValidateBeforeCall(trackerId, reportId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a report of a specific tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteTrackerReportAsync(Integer trackerId, Integer reportId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerReportValidateBeforeCall(trackerId, reportId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerReport
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param page Index of a report page starting from 1. (optional, default to 1)
     * @param pageSize Number of items a report page. Max value: 500 (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerReportCall(Integer trackerId, Integer reportId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/report/{reportId}/results"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "reportId" + "\\}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerReportValidateBeforeCall(Integer trackerId, Integer reportId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling getTrackerReport(Async)");
        }
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getTrackerReport(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerReportCall(trackerId, reportId, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * Get a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param page Index of a report page starting from 1. (optional, default to 1)
     * @param pageSize Number of items a report page. Max value: 500 (optional, default to 25)
     * @return ReportResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportResult getTrackerReport(Integer trackerId, Integer reportId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<ReportResult> localVarResp = getTrackerReportWithHttpInfo(trackerId, reportId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param page Index of a report page starting from 1. (optional, default to 1)
     * @param pageSize Number of items a report page. Max value: 500 (optional, default to 25)
     * @return ApiResponse&lt;ReportResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportResult> getTrackerReportWithHttpInfo(Integer trackerId, Integer reportId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getTrackerReportValidateBeforeCall(trackerId, reportId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<ReportResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a report of a specific tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param page Index of a report page starting from 1. (optional, default to 1)
     * @param pageSize Number of items a report page. Max value: 500 (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerReportAsync(Integer trackerId, Integer reportId, Integer page, Integer pageSize, final ApiCallback<ReportResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerReportValidateBeforeCall(trackerId, reportId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ReportResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrackerReport
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param trackerReportSettings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateTrackerReportCall(Integer trackerId, Integer reportId, TrackerReportSettings trackerReportSettings, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerReportSettings;

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/report/{reportId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "reportId" + "\\}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrackerReportValidateBeforeCall(Integer trackerId, Integer reportId, TrackerReportSettings trackerReportSettings, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling updateTrackerReport(Async)");
        }
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling updateTrackerReport(Async)");
        }
        

        okhttp3.Call localVarCall = updateTrackerReportCall(trackerId, reportId, trackerReportSettings, _callback);
        return localVarCall;

    }

    /**
     * Updates a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param trackerReportSettings  (optional)
     * @return TrackerReportSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerReportSettings updateTrackerReport(Integer trackerId, Integer reportId, TrackerReportSettings trackerReportSettings) throws ApiException {
        ApiResponse<TrackerReportSettings> localVarResp = updateTrackerReportWithHttpInfo(trackerId, reportId, trackerReportSettings);
        return localVarResp.getData();
    }

    /**
     * Updates a report of a specific tracker
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param trackerReportSettings  (optional)
     * @return ApiResponse&lt;TrackerReportSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerReportSettings> updateTrackerReportWithHttpInfo(Integer trackerId, Integer reportId, TrackerReportSettings trackerReportSettings) throws ApiException {
        okhttp3.Call localVarCall = updateTrackerReportValidateBeforeCall(trackerId, reportId, trackerReportSettings, null);
        Type localVarReturnType = new TypeToken<TrackerReportSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a report of a specific tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param reportId  (required)
     * @param trackerReportSettings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateTrackerReportAsync(Integer trackerId, Integer reportId, TrackerReportSettings trackerReportSettings, final ApiCallback<TrackerReportSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrackerReportValidateBeforeCall(trackerId, reportId, trackerReportSettings, _callback);
        Type localVarReturnType = new TypeToken<TrackerReportSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
