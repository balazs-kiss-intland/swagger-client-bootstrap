/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.ProgressRequestBody;
import com.intland.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.intland.swagger.client.model.InlineObject1;
import com.intland.swagger.client.model.TrackerItemRelationsResult;
import com.intland.swagger.client.model.UserDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BaselineApi {
    private ApiClient localVarApiClient;

    public BaselineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BaselineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getBaselineTrackerItemRelations
     * @param user  (required)
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getBaselineTrackerItemRelationsCall(UserDto user, Integer itemId, Integer baselineId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/item/{itemId}/relations"
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBaselineTrackerItemRelationsValidateBeforeCall(UserDto user, Integer itemId, Integer baselineId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getBaselineTrackerItemRelations(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getBaselineTrackerItemRelations(Async)");
        }
        

        okhttp3.Call localVarCall = getBaselineTrackerItemRelationsCall(user, itemId, baselineId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param user  (required)
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @return TrackerItemRelationsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerItemRelationsResult getBaselineTrackerItemRelations(UserDto user, Integer itemId, Integer baselineId) throws ApiException {
        ApiResponse<TrackerItemRelationsResult> localVarResp = getBaselineTrackerItemRelationsWithHttpInfo(user, itemId, baselineId);
        return localVarResp.getData();
    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param user  (required)
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @return ApiResponse&lt;TrackerItemRelationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerItemRelationsResult> getBaselineTrackerItemRelationsWithHttpInfo(UserDto user, Integer itemId, Integer baselineId) throws ApiException {
        okhttp3.Call localVarCall = getBaselineTrackerItemRelationsValidateBeforeCall(user, itemId, baselineId, null);
        Type localVarReturnType = new TypeToken<TrackerItemRelationsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items for a baseline version (asynchronously)
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param user  (required)
     * @param itemId  (required)
     * @param baselineId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getBaselineTrackerItemRelationsAsync(UserDto user, Integer itemId, Integer baselineId, final ApiCallback<TrackerItemRelationsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBaselineTrackerItemRelationsValidateBeforeCall(user, itemId, baselineId, _callback);
        Type localVarReturnType = new TypeToken<TrackerItemRelationsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBaselineTrackerItemsRelations
     * @param baselineId  (optional)
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getBaselineTrackerItemsRelationsCall(Integer baselineId, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/v2/items/relations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBaselineTrackerItemsRelationsValidateBeforeCall(Integer baselineId, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getBaselineTrackerItemsRelationsCall(baselineId, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param baselineId  (optional)
     * @param inlineObject1  (optional)
     * @return List&lt;TrackerItemRelationsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrackerItemRelationsResult> getBaselineTrackerItemsRelations(Integer baselineId, InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<List<TrackerItemRelationsResult>> localVarResp = getBaselineTrackerItemsRelationsWithHttpInfo(baselineId, inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Get tracker items for a baseline version
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param baselineId  (optional)
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;List&lt;TrackerItemRelationsResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrackerItemRelationsResult>> getBaselineTrackerItemsRelationsWithHttpInfo(Integer baselineId, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = getBaselineTrackerItemsRelationsValidateBeforeCall(baselineId, inlineObject1, null);
        Type localVarReturnType = new TypeToken<List<TrackerItemRelationsResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items for a baseline version (asynchronously)
     * API can be used for fetching basic information of tracker items at a specific baseline version
     * @param baselineId  (optional)
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getBaselineTrackerItemsRelationsAsync(Integer baselineId, InlineObject1 inlineObject1, final ApiCallback<List<TrackerItemRelationsResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBaselineTrackerItemsRelationsValidateBeforeCall(baselineId, inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItemRelationsResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
