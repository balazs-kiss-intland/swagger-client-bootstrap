/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FastDateFormatLocale
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-10T15:21:24.239+01:00[Europe/Budapest]")
public class FastDateFormatLocale {
  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_SCRIPT = "script";
  @SerializedName(SERIALIZED_NAME_SCRIPT)
  private String script;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public static final String SERIALIZED_NAME_EXTENSION_KEYS = "extensionKeys";
  @SerializedName(SERIALIZED_NAME_EXTENSION_KEYS)
  private List<String> extensionKeys = new ArrayList<String>();

  public static final String SERIALIZED_NAME_UNICODE_LOCALE_ATTRIBUTES = "unicodeLocaleAttributes";
  @SerializedName(SERIALIZED_NAME_UNICODE_LOCALE_ATTRIBUTES)
  private List<String> unicodeLocaleAttributes = new ArrayList<String>();

  public static final String SERIALIZED_NAME_UNICODE_LOCALE_KEYS = "unicodeLocaleKeys";
  @SerializedName(SERIALIZED_NAME_UNICODE_LOCALE_KEYS)
  private List<String> unicodeLocaleKeys = new ArrayList<String>();

  public static final String SERIALIZED_NAME_ISO3_LANGUAGE = "iso3Language";
  @SerializedName(SERIALIZED_NAME_ISO3_LANGUAGE)
  private String iso3Language;

  public static final String SERIALIZED_NAME_ISO3_COUNTRY = "iso3Country";
  @SerializedName(SERIALIZED_NAME_ISO3_COUNTRY)
  private String iso3Country;

  public static final String SERIALIZED_NAME_DISPLAY_LANGUAGE = "displayLanguage";
  @SerializedName(SERIALIZED_NAME_DISPLAY_LANGUAGE)
  private String displayLanguage;

  public static final String SERIALIZED_NAME_DISPLAY_SCRIPT = "displayScript";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SCRIPT)
  private String displayScript;

  public static final String SERIALIZED_NAME_DISPLAY_COUNTRY = "displayCountry";
  @SerializedName(SERIALIZED_NAME_DISPLAY_COUNTRY)
  private String displayCountry;

  public static final String SERIALIZED_NAME_DISPLAY_VARIANT = "displayVariant";
  @SerializedName(SERIALIZED_NAME_DISPLAY_VARIANT)
  private String displayVariant;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public FastDateFormatLocale language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @ApiModelProperty(value = "")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public FastDateFormatLocale script(String script) {
    this.script = script;
    return this;
  }

   /**
   * Get script
   * @return script
  **/
  @ApiModelProperty(value = "")
  public String getScript() {
    return script;
  }

  public void setScript(String script) {
    this.script = script;
  }

  public FastDateFormatLocale country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @ApiModelProperty(value = "")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public FastDateFormatLocale variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Get variant
   * @return variant
  **/
  @ApiModelProperty(value = "")
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }

  public FastDateFormatLocale extensionKeys(List<String> extensionKeys) {
    this.extensionKeys = extensionKeys;
    return this;
  }

  public FastDateFormatLocale addExtensionKeysItem(String extensionKeysItem) {
    if (this.extensionKeys == null) {
      this.extensionKeys = new ArrayList<String>();
    }
    this.extensionKeys.add(extensionKeysItem);
    return this;
  }

   /**
   * Get extensionKeys
   * @return extensionKeys
  **/
  @ApiModelProperty(value = "")
  public List<String> getExtensionKeys() {
    return extensionKeys;
  }

  public void setExtensionKeys(List<String> extensionKeys) {
    this.extensionKeys = extensionKeys;
  }

  public FastDateFormatLocale unicodeLocaleAttributes(List<String> unicodeLocaleAttributes) {
    this.unicodeLocaleAttributes = unicodeLocaleAttributes;
    return this;
  }

  public FastDateFormatLocale addUnicodeLocaleAttributesItem(String unicodeLocaleAttributesItem) {
    if (this.unicodeLocaleAttributes == null) {
      this.unicodeLocaleAttributes = new ArrayList<String>();
    }
    this.unicodeLocaleAttributes.add(unicodeLocaleAttributesItem);
    return this;
  }

   /**
   * Get unicodeLocaleAttributes
   * @return unicodeLocaleAttributes
  **/
  @ApiModelProperty(value = "")
  public List<String> getUnicodeLocaleAttributes() {
    return unicodeLocaleAttributes;
  }

  public void setUnicodeLocaleAttributes(List<String> unicodeLocaleAttributes) {
    this.unicodeLocaleAttributes = unicodeLocaleAttributes;
  }

  public FastDateFormatLocale unicodeLocaleKeys(List<String> unicodeLocaleKeys) {
    this.unicodeLocaleKeys = unicodeLocaleKeys;
    return this;
  }

  public FastDateFormatLocale addUnicodeLocaleKeysItem(String unicodeLocaleKeysItem) {
    if (this.unicodeLocaleKeys == null) {
      this.unicodeLocaleKeys = new ArrayList<String>();
    }
    this.unicodeLocaleKeys.add(unicodeLocaleKeysItem);
    return this;
  }

   /**
   * Get unicodeLocaleKeys
   * @return unicodeLocaleKeys
  **/
  @ApiModelProperty(value = "")
  public List<String> getUnicodeLocaleKeys() {
    return unicodeLocaleKeys;
  }

  public void setUnicodeLocaleKeys(List<String> unicodeLocaleKeys) {
    this.unicodeLocaleKeys = unicodeLocaleKeys;
  }

  public FastDateFormatLocale iso3Language(String iso3Language) {
    this.iso3Language = iso3Language;
    return this;
  }

   /**
   * Get iso3Language
   * @return iso3Language
  **/
  @ApiModelProperty(value = "")
  public String getIso3Language() {
    return iso3Language;
  }

  public void setIso3Language(String iso3Language) {
    this.iso3Language = iso3Language;
  }

  public FastDateFormatLocale iso3Country(String iso3Country) {
    this.iso3Country = iso3Country;
    return this;
  }

   /**
   * Get iso3Country
   * @return iso3Country
  **/
  @ApiModelProperty(value = "")
  public String getIso3Country() {
    return iso3Country;
  }

  public void setIso3Country(String iso3Country) {
    this.iso3Country = iso3Country;
  }

  public FastDateFormatLocale displayLanguage(String displayLanguage) {
    this.displayLanguage = displayLanguage;
    return this;
  }

   /**
   * Get displayLanguage
   * @return displayLanguage
  **/
  @ApiModelProperty(value = "")
  public String getDisplayLanguage() {
    return displayLanguage;
  }

  public void setDisplayLanguage(String displayLanguage) {
    this.displayLanguage = displayLanguage;
  }

  public FastDateFormatLocale displayScript(String displayScript) {
    this.displayScript = displayScript;
    return this;
  }

   /**
   * Get displayScript
   * @return displayScript
  **/
  @ApiModelProperty(value = "")
  public String getDisplayScript() {
    return displayScript;
  }

  public void setDisplayScript(String displayScript) {
    this.displayScript = displayScript;
  }

  public FastDateFormatLocale displayCountry(String displayCountry) {
    this.displayCountry = displayCountry;
    return this;
  }

   /**
   * Get displayCountry
   * @return displayCountry
  **/
  @ApiModelProperty(value = "")
  public String getDisplayCountry() {
    return displayCountry;
  }

  public void setDisplayCountry(String displayCountry) {
    this.displayCountry = displayCountry;
  }

  public FastDateFormatLocale displayVariant(String displayVariant) {
    this.displayVariant = displayVariant;
    return this;
  }

   /**
   * Get displayVariant
   * @return displayVariant
  **/
  @ApiModelProperty(value = "")
  public String getDisplayVariant() {
    return displayVariant;
  }

  public void setDisplayVariant(String displayVariant) {
    this.displayVariant = displayVariant;
  }

  public FastDateFormatLocale displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @ApiModelProperty(value = "")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FastDateFormatLocale fastDateFormatLocale = (FastDateFormatLocale) o;
    return Objects.equals(this.language, fastDateFormatLocale.language) &&
        Objects.equals(this.script, fastDateFormatLocale.script) &&
        Objects.equals(this.country, fastDateFormatLocale.country) &&
        Objects.equals(this.variant, fastDateFormatLocale.variant) &&
        Objects.equals(this.extensionKeys, fastDateFormatLocale.extensionKeys) &&
        Objects.equals(this.unicodeLocaleAttributes, fastDateFormatLocale.unicodeLocaleAttributes) &&
        Objects.equals(this.unicodeLocaleKeys, fastDateFormatLocale.unicodeLocaleKeys) &&
        Objects.equals(this.iso3Language, fastDateFormatLocale.iso3Language) &&
        Objects.equals(this.iso3Country, fastDateFormatLocale.iso3Country) &&
        Objects.equals(this.displayLanguage, fastDateFormatLocale.displayLanguage) &&
        Objects.equals(this.displayScript, fastDateFormatLocale.displayScript) &&
        Objects.equals(this.displayCountry, fastDateFormatLocale.displayCountry) &&
        Objects.equals(this.displayVariant, fastDateFormatLocale.displayVariant) &&
        Objects.equals(this.displayName, fastDateFormatLocale.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, script, country, variant, extensionKeys, unicodeLocaleAttributes, unicodeLocaleKeys, iso3Language, iso3Country, displayLanguage, displayScript, displayCountry, displayVariant, displayName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FastDateFormatLocale {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    extensionKeys: ").append(toIndentedString(extensionKeys)).append("\n");
    sb.append("    unicodeLocaleAttributes: ").append(toIndentedString(unicodeLocaleAttributes)).append("\n");
    sb.append("    unicodeLocaleKeys: ").append(toIndentedString(unicodeLocaleKeys)).append("\n");
    sb.append("    iso3Language: ").append(toIndentedString(iso3Language)).append("\n");
    sb.append("    iso3Country: ").append(toIndentedString(iso3Country)).append("\n");
    sb.append("    displayLanguage: ").append(toIndentedString(displayLanguage)).append("\n");
    sb.append("    displayScript: ").append(toIndentedString(displayScript)).append("\n");
    sb.append("    displayCountry: ").append(toIndentedString(displayCountry)).append("\n");
    sb.append("    displayVariant: ").append(toIndentedString(displayVariant)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

