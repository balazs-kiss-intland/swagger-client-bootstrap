/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ExportProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-10T15:21:24.239+01:00[Europe/Budapest]")
public class ExportProject {
  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SKIP_TRACKER_ITEMS = "skipTrackerItems";
  @SerializedName(SERIALIZED_NAME_SKIP_TRACKER_ITEMS)
  private Boolean skipTrackerItems = false;

  public static final String SERIALIZED_NAME_SKIP_WIKI_PAGES = "skipWikiPages";
  @SerializedName(SERIALIZED_NAME_SKIP_WIKI_PAGES)
  private Boolean skipWikiPages = false;

  public static final String SERIALIZED_NAME_SKIP_ASSOCIATIONS = "skipAssociations";
  @SerializedName(SERIALIZED_NAME_SKIP_ASSOCIATIONS)
  private Boolean skipAssociations = false;

  public static final String SERIALIZED_NAME_SKIP_DOCUMENTS = "skipDocuments";
  @SerializedName(SERIALIZED_NAME_SKIP_DOCUMENTS)
  private Boolean skipDocuments = false;

  public static final String SERIALIZED_NAME_SKIP_REPORTS = "skipReports";
  @SerializedName(SERIALIZED_NAME_SKIP_REPORTS)
  private Boolean skipReports = false;

  public static final String SERIALIZED_NAME_SKIP_BRANCHES = "skipBranches";
  @SerializedName(SERIALIZED_NAME_SKIP_BRANCHES)
  private Boolean skipBranches = false;

  public ExportProject password(String password) {
    this.password = password;
    return this;
  }

   /**
   * A password that is used during the project encryption.
   * @return password
  **/
  @ApiModelProperty(example = "007", value = "A password that is used during the project encryption.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public ExportProject skipTrackerItems(Boolean skipTrackerItems) {
    this.skipTrackerItems = skipTrackerItems;
    return this;
  }

   /**
   * If true, then the Tracker Items are not exported
   * @return skipTrackerItems
  **/
  @ApiModelProperty(value = "If true, then the Tracker Items are not exported")
  public Boolean getSkipTrackerItems() {
    return skipTrackerItems;
  }

  public void setSkipTrackerItems(Boolean skipTrackerItems) {
    this.skipTrackerItems = skipTrackerItems;
  }

  public ExportProject skipWikiPages(Boolean skipWikiPages) {
    this.skipWikiPages = skipWikiPages;
    return this;
  }

   /**
   * If true, then the Wiki PAges are not exported
   * @return skipWikiPages
  **/
  @ApiModelProperty(value = "If true, then the Wiki PAges are not exported")
  public Boolean getSkipWikiPages() {
    return skipWikiPages;
  }

  public void setSkipWikiPages(Boolean skipWikiPages) {
    this.skipWikiPages = skipWikiPages;
  }

  public ExportProject skipAssociations(Boolean skipAssociations) {
    this.skipAssociations = skipAssociations;
    return this;
  }

   /**
   * If true, then the Associations are not exported
   * @return skipAssociations
  **/
  @ApiModelProperty(value = "If true, then the Associations are not exported")
  public Boolean getSkipAssociations() {
    return skipAssociations;
  }

  public void setSkipAssociations(Boolean skipAssociations) {
    this.skipAssociations = skipAssociations;
  }

  public ExportProject skipDocuments(Boolean skipDocuments) {
    this.skipDocuments = skipDocuments;
    return this;
  }

   /**
   * If true, then the Documents are not exported
   * @return skipDocuments
  **/
  @ApiModelProperty(value = "If true, then the Documents are not exported")
  public Boolean getSkipDocuments() {
    return skipDocuments;
  }

  public void setSkipDocuments(Boolean skipDocuments) {
    this.skipDocuments = skipDocuments;
  }

  public ExportProject skipReports(Boolean skipReports) {
    this.skipReports = skipReports;
    return this;
  }

   /**
   * If true, then the Reports are not exported
   * @return skipReports
  **/
  @ApiModelProperty(value = "If true, then the Reports are not exported")
  public Boolean getSkipReports() {
    return skipReports;
  }

  public void setSkipReports(Boolean skipReports) {
    this.skipReports = skipReports;
  }

  public ExportProject skipBranches(Boolean skipBranches) {
    this.skipBranches = skipBranches;
    return this;
  }

   /**
   * If true, then the Branches are not exported
   * @return skipBranches
  **/
  @ApiModelProperty(value = "If true, then the Branches are not exported")
  public Boolean getSkipBranches() {
    return skipBranches;
  }

  public void setSkipBranches(Boolean skipBranches) {
    this.skipBranches = skipBranches;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportProject exportProject = (ExportProject) o;
    return Objects.equals(this.password, exportProject.password) &&
        Objects.equals(this.skipTrackerItems, exportProject.skipTrackerItems) &&
        Objects.equals(this.skipWikiPages, exportProject.skipWikiPages) &&
        Objects.equals(this.skipAssociations, exportProject.skipAssociations) &&
        Objects.equals(this.skipDocuments, exportProject.skipDocuments) &&
        Objects.equals(this.skipReports, exportProject.skipReports) &&
        Objects.equals(this.skipBranches, exportProject.skipBranches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, skipTrackerItems, skipWikiPages, skipAssociations, skipDocuments, skipReports, skipBranches);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportProject {\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    skipTrackerItems: ").append(toIndentedString(skipTrackerItems)).append("\n");
    sb.append("    skipWikiPages: ").append(toIndentedString(skipWikiPages)).append("\n");
    sb.append("    skipAssociations: ").append(toIndentedString(skipAssociations)).append("\n");
    sb.append("    skipDocuments: ").append(toIndentedString(skipDocuments)).append("\n");
    sb.append("    skipReports: ").append(toIndentedString(skipReports)).append("\n");
    sb.append("    skipBranches: ").append(toIndentedString(skipBranches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

