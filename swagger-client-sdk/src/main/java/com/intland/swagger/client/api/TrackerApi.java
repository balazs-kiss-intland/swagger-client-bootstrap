/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.ProgressRequestBody;
import com.intland.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.intland.swagger.client.model.AbstractField;
import com.intland.swagger.client.model.ChoiceOptionReference;
import com.intland.swagger.client.model.Tracker;
import com.intland.swagger.client.model.TrackerType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrackerApi {
    private ApiClient localVarApiClient;

    public TrackerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrackerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteTracker
     * @param trackerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteTrackerCall(Integer trackerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrackerValidateBeforeCall(Integer trackerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling deleteTracker(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrackerCall(trackerId, _callback);
        return localVarCall;

    }

    /**
     * Deletes a tracker
     * 
     * @param trackerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTracker(Integer trackerId) throws ApiException {
        deleteTrackerWithHttpInfo(trackerId);
    }

    /**
     * Deletes a tracker
     * 
     * @param trackerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTrackerWithHttpInfo(Integer trackerId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrackerValidateBeforeCall(trackerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteTrackerAsync(Integer trackerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrackerValidateBeforeCall(trackerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChoiceOption
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getChoiceOptionCall(Integer trackerId, Integer fieldId, Integer optionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field/{fieldId}/option/{optionId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", localVarApiClient.escapeString(fieldId.toString()))
            .replaceAll("\\{" + "optionId" + "\\}", localVarApiClient.escapeString(optionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChoiceOptionValidateBeforeCall(Integer trackerId, Integer fieldId, Integer optionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling getChoiceOption(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getChoiceOption(Async)");
        }
        
        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling getChoiceOption(Async)");
        }
        

        okhttp3.Call localVarCall = getChoiceOptionCall(trackerId, fieldId, optionId, _callback);
        return localVarCall;

    }

    /**
     * Get option of a choice field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @return ChoiceOptionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChoiceOptionReference getChoiceOption(Integer trackerId, Integer fieldId, Integer optionId) throws ApiException {
        ApiResponse<ChoiceOptionReference> localVarResp = getChoiceOptionWithHttpInfo(trackerId, fieldId, optionId);
        return localVarResp.getData();
    }

    /**
     * Get option of a choice field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @return ApiResponse&lt;ChoiceOptionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChoiceOptionReference> getChoiceOptionWithHttpInfo(Integer trackerId, Integer fieldId, Integer optionId) throws ApiException {
        okhttp3.Call localVarCall = getChoiceOptionValidateBeforeCall(trackerId, fieldId, optionId, null);
        Type localVarReturnType = new TypeToken<ChoiceOptionReference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get option of a choice field of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param optionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getChoiceOptionAsync(Integer trackerId, Integer fieldId, Integer optionId, final ApiCallback<ChoiceOptionReference> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChoiceOptionValidateBeforeCall(trackerId, fieldId, optionId, _callback);
        Type localVarReturnType = new TypeToken<ChoiceOptionReference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTracker
     * @param trackerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerCall(Integer trackerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerValidateBeforeCall(Integer trackerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling getTracker(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerCall(trackerId, _callback);
        return localVarCall;

    }

    /**
     * Get tracker
     * 
     * @param trackerId  (required)
     * @return Tracker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Tracker getTracker(Integer trackerId) throws ApiException {
        ApiResponse<Tracker> localVarResp = getTrackerWithHttpInfo(trackerId);
        return localVarResp.getData();
    }

    /**
     * Get tracker
     * 
     * @param trackerId  (required)
     * @return ApiResponse&lt;Tracker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Tracker> getTrackerWithHttpInfo(Integer trackerId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerValidateBeforeCall(trackerId, null);
        Type localVarReturnType = new TypeToken<Tracker>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerAsync(Integer trackerId, final ApiCallback<Tracker> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerValidateBeforeCall(trackerId, _callback);
        Type localVarReturnType = new TypeToken<Tracker>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerField
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerFieldCall(Integer trackerId, Integer fieldId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field/{fieldId}"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()))
            .replaceAll("\\{" + "fieldId" + "\\}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerFieldValidateBeforeCall(Integer trackerId, Integer fieldId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling getTrackerField(Async)");
        }
        
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getTrackerField(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerFieldCall(trackerId, fieldId, _callback);
        return localVarCall;

    }

    /**
     * Get field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @return AbstractField
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AbstractField getTrackerField(Integer trackerId, Integer fieldId) throws ApiException {
        ApiResponse<AbstractField> localVarResp = getTrackerFieldWithHttpInfo(trackerId, fieldId);
        return localVarResp.getData();
    }

    /**
     * Get field of tracker
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @return ApiResponse&lt;AbstractField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AbstractField> getTrackerFieldWithHttpInfo(Integer trackerId, Integer fieldId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerFieldValidateBeforeCall(trackerId, fieldId, null);
        Type localVarReturnType = new TypeToken<AbstractField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get field of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param fieldId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerFieldAsync(Integer trackerId, Integer fieldId, final ApiCallback<AbstractField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerFieldValidateBeforeCall(trackerId, fieldId, _callback);
        Type localVarReturnType = new TypeToken<AbstractField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerFields
     * @param trackerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerFieldsCall(Integer trackerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/{trackerId}/field"
            .replaceAll("\\{" + "trackerId" + "\\}", localVarApiClient.escapeString(trackerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerFieldsValidateBeforeCall(Integer trackerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerId' is set
        if (trackerId == null) {
            throw new ApiException("Missing the required parameter 'trackerId' when calling getTrackerFields(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerFieldsCall(trackerId, _callback);
        return localVarCall;

    }

    /**
     * Get fields of tracker
     * 
     * @param trackerId  (required)
     * @return List&lt;AbstractField&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AbstractField> getTrackerFields(Integer trackerId) throws ApiException {
        ApiResponse<List<AbstractField>> localVarResp = getTrackerFieldsWithHttpInfo(trackerId);
        return localVarResp.getData();
    }

    /**
     * Get fields of tracker
     * 
     * @param trackerId  (required)
     * @return ApiResponse&lt;List&lt;AbstractField&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AbstractField>> getTrackerFieldsWithHttpInfo(Integer trackerId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerFieldsValidateBeforeCall(trackerId, null);
        Type localVarReturnType = new TypeToken<List<AbstractField>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get fields of tracker (asynchronously)
     * 
     * @param trackerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerFieldsAsync(Integer trackerId, final ApiCallback<List<AbstractField>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerFieldsValidateBeforeCall(trackerId, _callback);
        Type localVarReturnType = new TypeToken<List<AbstractField>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerType
     * @param trackerTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerTypeCall(Integer trackerTypeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/types/{trackerTypeId}"
            .replaceAll("\\{" + "trackerTypeId" + "\\}", localVarApiClient.escapeString(trackerTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerTypeValidateBeforeCall(Integer trackerTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackerTypeId' is set
        if (trackerTypeId == null) {
            throw new ApiException("Missing the required parameter 'trackerTypeId' when calling getTrackerType(Async)");
        }
        

        okhttp3.Call localVarCall = getTrackerTypeCall(trackerTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get the immutable definition of a tracker type
     * 
     * @param trackerTypeId  (required)
     * @return TrackerType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TrackerType getTrackerType(Integer trackerTypeId) throws ApiException {
        ApiResponse<TrackerType> localVarResp = getTrackerTypeWithHttpInfo(trackerTypeId);
        return localVarResp.getData();
    }

    /**
     * Get the immutable definition of a tracker type
     * 
     * @param trackerTypeId  (required)
     * @return ApiResponse&lt;TrackerType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TrackerType> getTrackerTypeWithHttpInfo(Integer trackerTypeId) throws ApiException {
        okhttp3.Call localVarCall = getTrackerTypeValidateBeforeCall(trackerTypeId, null);
        Type localVarReturnType = new TypeToken<TrackerType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the immutable definition of a tracker type (asynchronously)
     * 
     * @param trackerTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerTypeAsync(Integer trackerTypeId, final ApiCallback<TrackerType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerTypeValidateBeforeCall(trackerTypeId, _callback);
        Type localVarReturnType = new TypeToken<TrackerType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerTypes
     * @param outline Outline is enabled, disabled or any(no filtering will be applied). (optional, default to ANY)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerTypesCall(String outline, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/tracker/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outline != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outline", outline));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerTypesValidateBeforeCall(String outline, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTrackerTypesCall(outline, _callback);
        return localVarCall;

    }

    /**
     * Get the list of tracker types
     * 
     * @param outline Outline is enabled, disabled or any(no filtering will be applied). (optional, default to ANY)
     * @return List&lt;TrackerType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrackerType> getTrackerTypes(String outline) throws ApiException {
        ApiResponse<List<TrackerType>> localVarResp = getTrackerTypesWithHttpInfo(outline);
        return localVarResp.getData();
    }

    /**
     * Get the list of tracker types
     * 
     * @param outline Outline is enabled, disabled or any(no filtering will be applied). (optional, default to ANY)
     * @return ApiResponse&lt;List&lt;TrackerType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrackerType>> getTrackerTypesWithHttpInfo(String outline) throws ApiException {
        okhttp3.Call localVarCall = getTrackerTypesValidateBeforeCall(outline, null);
        Type localVarReturnType = new TypeToken<List<TrackerType>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of tracker types (asynchronously)
     * 
     * @param outline Outline is enabled, disabled or any(no filtering will be applied). (optional, default to ANY)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerTypesAsync(String outline, final ApiCallback<List<TrackerType>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerTypesValidateBeforeCall(outline, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerType>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
