/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.ProgressRequestBody;
import com.intland.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.intland.swagger.client.model.AssociationType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssociationApi {
    private ApiClient localVarApiClient;

    public AssociationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssociationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteAssociation
     * @param associationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteAssociationCall(Integer associationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/associations/{associationId}"
            .replaceAll("\\{" + "associationId" + "\\}", localVarApiClient.escapeString(associationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssociationValidateBeforeCall(Integer associationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'associationId' is set
        if (associationId == null) {
            throw new ApiException("Missing the required parameter 'associationId' when calling deleteAssociation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAssociationCall(associationId, _callback);
        return localVarCall;

    }

    /**
     * Delete association
     * 
     * @param associationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAssociation(Integer associationId) throws ApiException {
        deleteAssociationWithHttpInfo(associationId);
    }

    /**
     * Delete association
     * 
     * @param associationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAssociationWithHttpInfo(Integer associationId) throws ApiException {
        okhttp3.Call localVarCall = deleteAssociationValidateBeforeCall(associationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete association (asynchronously)
     * 
     * @param associationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteAssociationAsync(Integer associationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssociationValidateBeforeCall(associationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAssociationType
     * @param associationTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAssociationTypeCall(Integer associationTypeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/associations/types/{associationTypeId}"
            .replaceAll("\\{" + "associationTypeId" + "\\}", localVarApiClient.escapeString(associationTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociationTypeValidateBeforeCall(Integer associationTypeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'associationTypeId' is set
        if (associationTypeId == null) {
            throw new ApiException("Missing the required parameter 'associationTypeId' when calling getAssociationType(Async)");
        }
        

        okhttp3.Call localVarCall = getAssociationTypeCall(associationTypeId, _callback);
        return localVarCall;

    }

    /**
     * Get association by id
     * 
     * @param associationTypeId  (required)
     * @return AssociationType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssociationType getAssociationType(Integer associationTypeId) throws ApiException {
        ApiResponse<AssociationType> localVarResp = getAssociationTypeWithHttpInfo(associationTypeId);
        return localVarResp.getData();
    }

    /**
     * Get association by id
     * 
     * @param associationTypeId  (required)
     * @return ApiResponse&lt;AssociationType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssociationType> getAssociationTypeWithHttpInfo(Integer associationTypeId) throws ApiException {
        okhttp3.Call localVarCall = getAssociationTypeValidateBeforeCall(associationTypeId, null);
        Type localVarReturnType = new TypeToken<AssociationType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get association by id (asynchronously)
     * 
     * @param associationTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAssociationTypeAsync(Integer associationTypeId, final ApiCallback<AssociationType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociationTypeValidateBeforeCall(associationTypeId, _callback);
        Type localVarReturnType = new TypeToken<AssociationType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
