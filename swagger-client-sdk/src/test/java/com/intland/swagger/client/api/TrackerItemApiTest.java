/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.model.TrackerItem;
import com.intland.swagger.client.model.TrackerItemChildReference;
import com.intland.swagger.client.model.TrackerItemHistory;
import com.intland.swagger.client.model.TrackerItemRevision;
import com.intland.swagger.client.model.TrackerItemRevisionSearchResult;
import com.intland.swagger.client.model.TrackerItemSearchRequest;
import com.intland.swagger.client.model.TrackerItemSearchResult;
import com.intland.swagger.client.model.TrackerItemsRequest;
import com.intland.swagger.client.model.UpdateTrackerItemChildrenRequest;
import com.intland.swagger.client.model.UpdateTrackerItemField;
import com.intland.swagger.client.model.UpdateTrackerItemTableField;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TrackerItemApi
 */
@Ignore
public class TrackerItemApiTest {

    private final TrackerItemApi api = new TrackerItemApi();

    
    /**
     * Add a child item to a tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addChildToTrackerItemTest() throws ApiException {
        Integer itemId = null;
        TrackerItemRevision trackerItemRevision = null;
        TrackerItemChildReference response = api.addChildToTrackerItem(itemId, trackerItemRevision);

        // TODO: test validations
    }
    
    /**
     * Create a tracker item
     *
     * ext:createTrackerItem.wiki
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTrackerItemTest() throws ApiException {
        Integer trackerId = null;
        Integer referenceItemId = null;
        String position = null;
        TrackerItem trackerItem = null;
        TrackerItem response = api.createTrackerItem(trackerId, referenceItemId, position, trackerItem);

        // TODO: test validations
    }
    
    /**
     * Create a tracker item with parent
     *
     * ext:createTrackerItemWithParent.wiki
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTrackerItemWithParentIdTest() throws ApiException {
        Integer trackerId = null;
        Integer parentItemId = null;
        Integer referenceItemId = null;
        String position = null;
        TrackerItem trackerItem = null;
        TrackerItem response = api.createTrackerItemWithParentId(trackerId, parentItemId, referenceItemId, position, trackerItem);

        // TODO: test validations
    }
    
    /**
     * Delete tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTrackerItemTest() throws ApiException {
        Integer itemId = null;
        TrackerItem response = api.deleteTrackerItem(itemId);

        // TODO: test validations
    }
    
    /**
     * Get child items of a tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTrackerItemChildrenTest() throws ApiException {
        Integer itemId = null;
        Integer page = null;
        Integer pageSize = null;
        TrackerItemRevisionSearchResult response = api.findTrackerItemChildren(itemId, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get tracker items by cbQL query string
     *
     * ext:queryTrackerItem.wiki
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTrackerItemsTest() throws ApiException {
        String queryString = null;
        Integer page = null;
        Integer pageSize = null;
        TrackerItemSearchResult response = api.findTrackerItems(queryString, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get tracker items by cbQL query string
     *
     * API can be called with a complex cbQL string to find tracker items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findTrackerItemsByCbQLTest() throws ApiException {
        TrackerItemSearchRequest trackerItemSearchRequest = null;
        TrackerItemSearchResult response = api.findTrackerItemsByCbQL(trackerItemSearchRequest);

        // TODO: test validations
    }
    
    /**
     * Get basic tracker item
     *
     * API can be used for fetching basic information of a tracker item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackerItemTest() throws ApiException {
        Integer itemId = null;
        Integer version = null;
        Integer baselineId = null;
        TrackerItem response = api.getTrackerItem(itemId, version, baselineId);

        // TODO: test validations
    }
    
    /**
     * Get tracker item history
     *
     * API can be used for fetching basic information of a tracker item
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackerItemHistoryTest() throws ApiException {
        Integer itemId = null;
        TrackerItemHistory response = api.getTrackerItemHistory(itemId);

        // TODO: test validations
    }
    
    /**
     * Get tracker items
     *
     * API can be used for fetching basic information of tracker items
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackerItemsTest() throws ApiException {
        Integer baselineId = null;
        TrackerItemsRequest trackerItemsRequest = null;
        List<TrackerItem> response = api.getTrackerItems(baselineId, trackerItemsRequest);

        // TODO: test validations
    }
    
    /**
     * Patch the child item list of a tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchChildrenOfTrackerItemTest() throws ApiException {
        Integer itemId = null;
        String mode = null;
        TrackerItemChildReference trackerItemChildReference = null;
        TrackerItemChildReference response = api.patchChildrenOfTrackerItem(itemId, mode, trackerItemChildReference);

        // TODO: test validations
    }
    
    /**
     * Replace the child item list of a tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceChildrenOfTrackerItemTest() throws ApiException {
        Integer itemId = null;
        Integer resultPageSize = null;
        UpdateTrackerItemChildrenRequest updateTrackerItemChildrenRequest = null;
        TrackerItemRevisionSearchResult response = api.replaceChildrenOfTrackerItem(itemId, resultPageSize, updateTrackerItemChildrenRequest);

        // TODO: test validations
    }
    
    /**
     * Update field of tracker item
     *
     * ext:updateTrackerItemField.wiki
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomFieldTrackerItemTest() throws ApiException {
        Integer itemId = null;
        Boolean quietMode = null;
        UpdateTrackerItemField updateTrackerItemField = null;
        TrackerItem response = api.updateCustomFieldTrackerItem(itemId, quietMode, updateTrackerItemField);

        // TODO: test validations
    }
    
    /**
     * Update table field of tracker item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTableFieldTrackerItemTest() throws ApiException {
        Integer itemId = null;
        Integer tableFieldId = null;
        UpdateTrackerItemTableField updateTrackerItemTableField = null;
        TrackerItem response = api.updateTableFieldTrackerItem(itemId, tableFieldId, updateTrackerItemTableField);

        // TODO: test validations
    }
    
    /**
     * Update tracker item
     *
     * ext:updateTrackerItem.wiki
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTrackerItemTest() throws ApiException {
        Integer itemId = null;
        Integer referenceItemId = null;
        String position = null;
        TrackerItem trackerItem = null;
        TrackerItem response = api.updateTrackerItem(itemId, referenceItemId, position, trackerItem);

        // TODO: test validations
    }
    
}
